export interface Room {
  id: string;
  participants: any[];
  history: GameSnapshot[];
}

export interface GameSnapshot {
  board: string[];
  playersTurn: Player;
  winner: Player | null;
  previousMove: PlayerMove | null;
  remainingPiecesX: PlayerPiece[];
  remainingPiecesO: PlayerPiece[];
}

export function initialGameState(): GameSnapshot {
  return {
    board: Array(9).fill(null),
    playersTurn: Player.X,
    previousMove: null,
    winner: null,
    remainingPiecesX: allPlayerPieces(),
    remainingPiecesO: allPlayerPieces(),
  };
}

export enum Player {
  X = "X",
  O = "O",
}

export enum PlayerPiece {
  small_1 = "1-1",
  small_2 = "1-2",
  medium_1 = "2-1",
  medium_2 = "2-2",
  large_1 = "3-1",
  large_2 = "3-2",
}

export function allPlayerPieces() {
  return [
    PlayerPiece.large_1,
    PlayerPiece.large_2,
    PlayerPiece.medium_1,
    PlayerPiece.medium_2,
    PlayerPiece.small_1,
    PlayerPiece.small_2,
  ];
}

export interface User {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
}

export interface Drive {
  id: string;
  owner_id: string;
  created_at: string;
  name: string;
  seats: number;
  voice_seats: number;
  subscription_info: SubscriptionInfo;
  available_prepaid_minutes: number;
  free_transcription_minutes: number;
  current_product: string;
  billing_entity_id: string;
  memberships: Membership[];
  owner: User;
  billing_entity: BillingEntity;
  voice_permissions: any[];
}

export interface BillingEntity {
  id: string;
  stripe_customer_id: string;
  created_at: string;
}

export interface Membership {
  id: string;
  user_id: string;
  drive_id: string;
  type: string;
  user: User;
}

export interface SubscriptionInfo {
  state: string;
  group_id: string;
  main_product_subscription_id: string;
  metered_product_subscription_id: string;
}

export interface PlayerMove {
  player: Player;
  piece: PlayerPiece;
  location: number;
}

// Generated by https://quicktype.io

export interface Project {
  id: string;
  name: string;
  is_public: boolean;
  created_at: string;
  drive_id: string;
  last_viewed_at: string;
  in_recordings_folder: boolean;
  owner: User;
  revisions: Revision[];
  media_assets: any[];
  permissions: Permissions;
  team_id: string;
}

// Generated by https://quicktype.io

export interface PublishedProject {
  id: string;
  name: string;
  created_at: string;
  updated_at: string;
  drive_id: string;
  source_project_id: string;
  source_scene_id: string;
  publish_type: string;
  comments_enabled: boolean;
  transcript_enabled: boolean;
  contents: Contents;
  state: string;
  published_scene_id: string;
  upload_progress: UploadProgress;
  access_permission: string;
  is_draft: boolean;
  url_slug: string;
  recording_id: string;
  published_by: PublishedBy;
  current_server_time: string;
}

export interface Contents {
  media: Media;
  document: Document;
  subtitles: Document;
  transcript: Document;
}

export interface Document {
  url: string;
  cdn_url: string;
}

export interface Media {
  stream: Document;
  original: Document;
  thumbnail: Document;
}

export interface PublishedBy {
  id: string;
  first_name: string;
  last_name: string;
}

export interface UploadProgress {
  progress: number;
}

export interface Permissions {
  public_access: string;
  member_access: string;
}

export interface Revision {
  id: string;
  revision_number: number;
  created_at: string;
  engine_version: string;
  bundle_version: string;
  scene_count: number;
  needs_encoding: boolean;
  created_by: User;
  tags: any[];
}

// Generated by https://quicktype.io

export interface Document {
  type: string;
  mediaLibrary: MediaLibrary;
  highlighters: Highlighter[];
  voices: any[];
  sequenceScenes: any[];
  pinScenes: any[];
  transcripts: Transcript[];
  compositions: Composition[];
  sceneFolders: Highlighter[];
  mediaFolders: Highlighter[];
  clientId: string;
  clientName: string;
  clientOS: string;
  documentVersion: string;
  settings: Settings;
  validity: Validity;
  model: Model;
}

export interface Composition {
  type: string;
  id: string;
  name: string;
  timeline: CompositionTimeline;
  videoWidth: number;
  videoHeight: number;
  videoFramerateNumerator: number;
  videoFramerateDenominator: number;
  changedSinceLastPublish: boolean;
}

export interface CompositionTimeline {
  id: string;
  type: string;
  superTau: PurpleSuperTau;
  noAudioTrack: Cues;
  pins: Cues;
  cues: Cues;
}

export interface Cues {
  id: string;
  type: CuesType;
  components: any[];
}

export enum CuesType {
  CueTrack = "cueTrack",
  NoAudioTrack = "noAudioTrack",
  PinsTrack = "pinsTrack",
}

export interface PurpleSuperTau {
  id: string;
  type: string;
  taus: PurpleTau[];
  bouncedMediaRef: BouncedMediaRef;
}

export interface BouncedMediaRef {
  type: BouncedMediaRefType;
  id: string;
  basename: string;
  displayName: string;
  hasMetadata: boolean;
  isBounced: boolean;
}

export enum BouncedMediaRefType {
  MediaAudioReference = "mediaAudioReference",
  MediaVoiceoverReference = "mediaVoiceoverReference",
}

export interface PurpleTau {
  id: string;
  type: TauType;
  text: Text;
  audioSegment: PurpleAudioSegment;
}

export interface PurpleAudioSegment {
  type: AudioSegmentType;
  ref: string;
  offset: number;
  duration: number;
  effects: Effect[];
  suppressAutoMerge?: boolean;
  speed?: number;
  audioFades?: OFades;
  videoFades?: OFades;
  gain?: number;
}

export interface OFades {
  fadeOutDuration?: number;
  fadeOutShape?: number;
  fadeInDuration?: number;
  fadeInShape?: number;
}

export interface Effect {
  id: string;
  type: EffectType;
  keyframes: Keyframe[];
  isDisabled: boolean;
}

export interface Keyframe {
  offset: number;
  value: Value;
}

export interface Value {
  x: number;
  y: number;
}

export enum EffectType {
  Scale = "scale",
}

export enum AudioSegmentType {
  VoiceoverAudioSegment = "voiceoverAudioSegment",
}

export interface Text {
  string: string;
  attributes: any[];
}

export enum TauType {
  Tau = "tau",
}

export interface Highlighter {
  type: string;
  id: string;
  name: string;
  color?: number[];
  items?: Item[];
}

export interface Item {
  type: string;
  ref: string;
}

export interface MediaLibrary {
  type: string;
  mediaRefs: MediaRef[];
}

export interface MediaRef {
  type: BouncedMediaRefType;
  id: string;
  basename: string;
  displayName: string;
  hasMetadata: boolean;
  duration: number;
  roomtoneRefId?: string;
  transcriptReceipt?: string;
  transcriptionType?: string;
  videoDuration?: number;
  videoWidth?: number;
  videoHeight?: number;
  videoFramerateNumerator?: number;
  videoFramerateDenominator?: number;
  source?: string;
}

export interface Model {}

export interface Settings {
  automaticallyLevelClips: boolean;
  useRoomtoneOnGapClips: boolean;
}

export interface Transcript {
  type: string;
  id: string;
  name: string;
  timeline: TranscriptTimeline;
  videoWidth: number;
  videoHeight: number;
  videoFramerateNumerator: number;
  videoFramerateDenominator: number;
  transcriptVoiceoverRef: string;
}

export interface TranscriptTimeline {
  id: string;
  type: string;
  superTau: SuperTau;
  noAudioTrack: Cues;
  pins: Cues;
  cues: Cues;
}

export interface SuperTau {
  id: string;
  type: string;
  taus: Tau[];
}

export interface Tau {
  id: string;
  type: TauType;
  text: Text;
  audioSegment: FluffyAudioSegment;
}

export interface FluffyAudioSegment {
  type: AudioSegmentType;
  ref: string;
  offset: number;
  duration: number;
  effects: Effect[];
}

export interface Validity {
  version: number;
  isAlignmentValid: boolean;
}
